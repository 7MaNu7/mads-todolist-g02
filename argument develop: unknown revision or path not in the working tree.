[1mdiff --git a/app/models/Etiqueta.java b/app/models/Etiqueta.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ec32ea5[m
[1m--- /dev/null[m
[1m+++ b/app/models/Etiqueta.java[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32mpackage models;[m
[32m+[m
[32m+[m[32mimport javax.persistence.*;[m
[32m+[m[32mimport play.data.validation.Constraints;[m
[32m+[m[32mimport play.data.format.*;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.text.DateFormat;[m
[32m+[m[32mimport java.text.SimpleDateFormat;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32mpublic class Etiqueta {[m
[32m+[m[32m        @Id[m
[32m+[m[32m        @GeneratedValue(strategy=GenerationType.AUTO)[m
[32m+[m[41m    [m	[32mpublic Integer id;[m
[32m+[m
[32m+[m[32m        @Constraints.Required //no nula[m
[32m+[m[32m        //@Column(unique=true) //unica[m
[32m+[m[32m        public String nombre; //el nombre no podra ser nulo[m
[32m+[m
[32m+[m[32m        @ManyToOne[m
[32m+[m[32m        @JoinColumn(name="usuarioId")[m
[32m+[m[32m        public Usuario usuario;[m
[32m+[m
[32m+[m[32m        public Etiqueta() {}[m
[32m+[m
[32m+[m[32m        public Etiqueta(String nombre,Usuario usuario) {[m
[32m+[m[32m            this.nombre = nombre;[m
[32m+[m[32m            this.usuario=usuario;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override public boolean equals(Object obj) {[m
[32m+[m[32m            if (obj == this) {[m
[32m+[m[32m                return true;[m
[32m+[m[32m            } if (obj == null || obj.getClass() != this.getClass()) {[m
[32m+[m[32m                return false;[m
[32m+[m[32m            }[m
[32m+[m[32m            Etiqueta otraEtiqueta = (Etiqueta) obj;[m
[32m+[m
[32m+[m[32m            //el nombre de una etiqueta debe ser UNICO, as√≠ que si[m
[32m+[m[32m            //hay dos etiquetas con el mismo nombre, se consideran identicas.[m
[32m+[m
[32m+[m[32m            if (id != null && otraEtiqueta.id != null) return (id == otraEtiqueta.id);[m
[32m+[m[32m            else return (nombre.equals(otraEtiqueta.nombre)) &&[m
[32m+[m[32m                        (usuario.equals(otraEtiqueta.usuario));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override public int hashCode() {[m
[32m+[m[32m            final int prime = 31;[m
[32m+[m[32m            int result = 1;[m
[32m+[m[32m            result = prime * result +[m
[32m+[m[32m                ((id == null) ? 0 : id);[m
[32m+[m[32m            result = prime * result +[m
[32m+[m[32m                ((nombre == null) ? 0 : nombre.hashCode());[m
[32m+[m[32m            result = prime * result +[m
[32m+[m[32m                ((usuario == null) ? 0 : usuario.hashCode());[m
[32m+[m[32m            return result;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public String toString() {[m
[32m+[m[32m            return String.format("Etiqueta id: %s nombre: %s",[m
[32m+[m[32m                id,nombre);[m
[32m+[m[32m        }[m
[32m+[m[32m}[m
[1mdiff --git a/app/models/EtiquetaDAO.java b/app/models/EtiquetaDAO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0febdac[m
[1m--- /dev/null[m
[1m+++ b/app/models/EtiquetaDAO.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage models;[m
[32m+[m
[32m+[m[32mimport play.*;[m
[32m+[m[32mimport play.mvc.*;[m
[32m+[m[32mimport play.db.jpa.*;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m
[32m+[m[32mimport javax.persistence.*;[m
[32m+[m
[32m+[m[32mpublic class EtiquetaDAO {[m
[32m+[m[32m    public static Etiqueta find(Integer idEtiqueta) {[m
[32m+[m[32m        return JPA.em().find(Etiqueta.class, idEtiqueta);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @play.db.jpa.Transactional[m
[32m+[m[32m    public static Etiqueta create (Etiqueta etiqueta) {[m
[32m+[m
[32m+[m[32m        JPA.em().persist(etiqueta);[m
[32m+[m[32m        //hacemos un flush y refresh para asegurarnos[m
[32m+[m[32m        //de que se realiza la creacion de la db y se devuelve el id[m
[32m+[m[32m        //inicializado[m
[32m+[m[32m        JPA.em().flush();[m
[32m+[m[32m        JPA.em().refresh(etiqueta);[m
[32m+[m[32m        Logger.debug(etiqueta.toString());[m
[32m+[m[32m        return etiqueta;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Etiqueta update(Etiqueta e) {[m
[32m+[m[32m        return JPA.em().merge(e);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void delete(Integer id) {[m
[32m+[m[32m        Etiqueta e = JPA.em().getReference(Etiqueta.class, id);[m
[32m+[m[32m        JPA.em().remove(e);[m
[32m+[m[32m        Logger.debug("Se ha borrado la etiqueta " + id);[m
[32m+[m
[32m+[m[32m        //hacemos un flush y refresh para asegurarnos[m
[32m+[m[32m        //de que se actualiza ese borrado en el usuario creador[m
[32m+[m[32m        JPA.em().flush();[m
[32m+[m[32m        JPA.em().refresh(e.usuario);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/app/models/EtiquetaService.java b/app/models/EtiquetaService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b0c6803[m
[1m--- /dev/null[m
[1m+++ b/app/models/EtiquetaService.java[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32mpackage models;[m
[32m+[m
[32m+[m[32mimport play.*;[m
[32m+[m[32mimport play.mvc.*;[m
[32m+[m[32mimport play.db.jpa.*;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport javax.persistence.EntityNotFoundException;[m
[32m+[m
[32m+[m[32mpublic class EtiquetaService {[m
[32m+[m[32m    public static Etiqueta grabaEtiqueta(Etiqueta etiqueta) {[m
[32m+[m[32m        return EtiquetaDAO.create(etiqueta);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static List<Etiqueta> findAllEtiquetasUsuario(Integer usuarioId) {[m
[32m+[m[32m        Usuario usuario = UsuarioDAO.find(usuarioId);[m
[32m+[m[32m        return usuario.etiquetas;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Etiqueta findEtiqueta(Integer id) {[m
[32m+[m[32m        return EtiquetaDAO.find(id);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static boolean deleteEtiqueta(Integer id) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            EtiquetaDAO.delete(id);[m
[32m+[m[32m        } catch(EntityNotFoundException e) {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Etiqueta modificaEtiqueta(Etiqueta etiqueta) {[m
[32m+[m[32m        return EtiquetaDAO.update(etiqueta);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/app/models/Tarea.java b/app/models/Tarea.java[m
[1mindex 2ab5856..f293fed 100644[m
[1m--- a/app/models/Tarea.java[m
[1m+++ b/app/models/Tarea.java[m
[36m@@ -3,7 +3,7 @@[m [mpackage models;[m
 import javax.persistence.*;[m
 import play.data.validation.Constraints;[m
 import play.data.format.*;[m
[31m-[m
[32m+[m[32mimport java.util.List;[m
 import java.text.DateFormat;[m
 import java.text.SimpleDateFormat;[m
 [m
[36m@@ -15,6 +15,11 @@[m [mpublic class Tarea {[m
         @ManyToOne[m
         @JoinColumn(name="usuarioId")[m
         public Usuario usuario;[m
[32m+[m
[32m+[m[32m        @ManyToMany(cascade=CascadeType.ALL)[m
[32m+[m[32m        @JoinTable(name="tarea_etiqueta", joinColumns=@JoinColumn(name="tarea_id"), inverseJoinColumns=@JoinColumn(name="etiqueta_id"))[m
[32m+[m[32m        public List<Etiqueta> etiquetas;[m
[32m+[m
         public String descripcion;[m
         @Constraints.Required[m
         public String estado;[m
[36m@@ -28,6 +33,15 @@[m [mpublic class Tarea {[m
             this.estado = "pendiente";[m
         }[m
 [m
[32m+[m[32m        public Tarea(String descripcion, Usuario usuario,List<Etiqueta> etiquetas) {[m
[32m+[m[32m            this.descripcion = descripcion;[m
[32m+[m[32m            this.usuario = usuario;[m
[32m+[m[32m            this.etiquetas = etiquetas;[m
[32m+[m[32m            this.estado = "pendiente";[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
         @Override public boolean equals(Object obj) {[m
             if (obj == this) {[m
                 return true;[m
[36m@@ -66,7 +80,11 @@[m [mpublic class Tarea {[m
         }[m
 [m
         public String toString() {[m
[31m-            return String.format("Tarea id: %s descripcion: %s UsuarioId: %s estado: %s",[m
[32m+[m[32m            String cadena = String.format("Tarea id: %s descripcion: %s UsuarioId: %s estado: %s",[m
                 id,descripcion,usuario.id,estado);[m
[32m+[m[32m            cadena+=" \nEtiquetas:\n";[m
[32m+[m[32m            for(Etiqueta e:etiquetas)[m
[32m+[m[32m                cadena+=e + "\n";[m
[32m+[m[32m            return cadena;[m
         }[m
 }[m
[1mdiff --git a/app/models/Usuario.java b/app/models/Usuario.java[m
[1mindex d966ab1..e09e982 100644[m
[1m--- a/app/models/Usuario.java[m
[1m+++ b/app/models/Usuario.java[m
[36m@@ -19,6 +19,10 @@[m [mpublic class Usuario {[m
     public String password;[m
     @OneToMany(mappedBy="usuario", cascade=CascadeType.ALL)[m
     public List<Tarea> tareas;[m
[32m+[m
[32m+[m[32m    @OneToMany(mappedBy="usuario", cascade=CascadeType.ALL)[m
[32m+[m[32m    public List<Etiqueta> etiquetas;[m
[32m+[m
     public String nombre;[m
     public String apellidos;[m
     public String eMail;[m
[1mdiff --git a/test/EtiquetasTests.java b/test/EtiquetasTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..dcd0fcf[m
[1m--- /dev/null[m
[1m+++ b/test/EtiquetasTests.java[m
[36m@@ -0,0 +1,181 @@[m
[32m+[m[32mimport org.junit.*;[m
[32m+[m[32mimport play.test.*;[m
[32m+[m[32mimport play.Application;[m
[32m+[m[32mimport play.mvc.*;[m
[32m+[m[32mimport static play.test.Helpers.*;[m
[32m+[m[32mimport static org.junit.Assert.*;[m
[32m+[m[32mimport play.db.jpa.*;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport models.*;[m
[32m+[m[32mimport org.dbunit.*;[m
[32m+[m[32mimport org.dbunit.dataset.*;[m
[32m+[m[32mimport org.dbunit.dataset.xml.*;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.io.FileInputStream;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m
[32m+[m
[32m+[m[32mimport play.libs.ws.*;[m
[32m+[m
[32m+[m[32mpublic class EtiquetasTests {[m
[32m+[m
[32m+[m[32m    JndiDatabaseTester databaseTester;[m
[32m+[m[32m    Application app;[m
[32m+[m
[32m+[m[32m    // Devuelve los settings necesarios para crear la aplicaci√≥n fake[m
[32m+[m[32m    // usando la base de datos de integraci√≥n[m
[32m+[m[32m    private static HashMap<String, String> settings() {[m
[32m+[m[32m        HashMap<String, String> settings = new HashMap<String, String>();[m
[32m+[m[32m        settings.put("db.default.url", "jdbc:mysql://localhost:3306/mads_test");[m
[32m+[m[32m        settings.put("db.default.username", "root");[m
[32m+[m[32m        settings.put("db.default.password", "mads"); //no puse password a root[m
[32m+[m[32m        settings.put("db.default.jndiName", "DefaultDS");[m
[32m+[m[32m        settings.put("jpa.default", "mySqlPersistenceUnit");[m
[32m+[m[32m        return(settings);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    // Crea la conexi√≥n con la base de datos de prueba y[m
[32m+[m[32m    // la inicializa con las tablas definidas por las entidades JPA[m
[32m+[m[32m    @BeforeClass[m
[32m+[m[32m    public static void createTables() {[m
[32m+[m[32m        Application fakeApp = Helpers.fakeApplication(settings());[m
[32m+[m[32m        // Abrimos una transacci√≥n para que JPA cree en la BD[m
[32m+[m[32m        // las tablas correspondientes a las entidades[m
[32m+[m[32m        running (fakeApp, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {});[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Se ejecuta antes de cada tests, inicializando la BD con los[m
[32m+[m[32m    // datos del dataset[m
[32m+[m[32m    @Before[m
[32m+[m[32m    public void inicializaBaseDatos() throws Exception {[m
[32m+[m[32m        app = Helpers.fakeApplication(settings());[m
[32m+[m[32m        databaseTester = new JndiDatabaseTester("DefaultDS");[m
[32m+[m[32m        IDataSet initialDataSet = new FlatXmlDataSetBuilder().build(new[m
[32m+[m[32m            FileInputStream("test/resources/tareas_dataset_1.xml"));[m
[32m+[m[32m        databaseTester.setDataSet(initialDataSet);[m
[32m+[m[32m        databaseTester.onSetup();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @After[m
[32m+[m[32m    public void cierraBaseDatos() throws Exception {[m
[32m+[m[32m        databaseTester.onTearDown();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testCreaEtiquetaDevuelveEtiqueta() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(2);[m
[32m+[m[32m                Etiqueta etiqueta = new Etiqueta("Trabajo fin de Grado",usuario);[m
[32m+[m[32m                etiqueta = EtiquetaDAO.create(etiqueta);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m                assertEquals(etiqueta.nombre,"Trabajo fin de Grado");[m
[32m+[m[32m                assertEquals(etiqueta.usuario.login,"julia");[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testEtiquetaServiceCreaEtiquetaDevuelveEtiqueta() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(2);[m
[32m+[m[32m                Etiqueta etiqueta = new Etiqueta("Cosas",usuario);[m
[32m+[m[32m                etiqueta = EtiquetaDAO.create(etiqueta);[m
[32m+[m[32m                List<Etiqueta> tags = new ArrayList<Etiqueta>();[m
[32m+[m[32m                tags.add(etiqueta);[m
[32m+[m[32m                Etiqueta etique = new Etiqueta("Para vacaciones",usuario);[m
[32m+[m[32m                etique = EtiquetaService.grabaEtiqueta(etique);[m
[32m+[m[32m                tags.add(etique);[m
[32m+[m[32m                Tarea tarea = new Tarea("Una tarea muy chulilla",usuario,tags);[m
[32m+[m[32m                tarea = TareaService.grabaTarea(tarea);[m
[32m+[m
[32m+[m[32m                assertEquals(tarea.descripcion,"Una tarea muy chulilla");[m
[32m+[m[32m                assertEquals(2,tarea.etiquetas.size());[m
[32m+[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testEtiquetaModificar() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Etiqueta etiqueta = EtiquetaDAO.find(1);[m
[32m+[m[32m                etiqueta.nombre="Deportes";[m
[32m+[m[32m                etiqueta = EtiquetaDAO.update(etiqueta);[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(1);[m
[32m+[m[32m                assertEquals(usuario.etiquetas.get(0).nombre,"Deportes");[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testEtiquetaBorrar() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Etiqueta etiqueta = EtiquetaDAO.find(1);[m
[32m+[m[32m                EtiquetaDAO.delete(etiqueta.id);[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(1);[m
[32m+[m[32m                assertEquals(0,usuario.etiquetas.size());[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testCreaEtiquetaService() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(2);[m
[32m+[m[32m                Etiqueta etiqueta = new Etiqueta("Trabajo fin de Grado",usuario);[m
[32m+[m[32m                etiqueta = EtiquetaService.grabaEtiqueta(etiqueta);[m
[32m+[m
[32m+[m[32m                assertEquals(etiqueta.nombre,"Trabajo fin de Grado");[m
[32m+[m[32m                assertEquals(etiqueta.usuario.login,"julia");[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testEtiquetaModificarService() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Etiqueta etiqueta = EtiquetaDAO.find(1);[m
[32m+[m[32m                etiqueta.nombre="Deportes";[m
[32m+[m[32m                etiqueta = EtiquetaService.modificaEtiqueta(etiqueta);[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(1);[m
[32m+[m[32m                assertEquals(usuario.etiquetas.get(0).nombre,"Deportes");[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Test[m
[32m+[m[32m    public void testEtiquetaBorrarService() {[m
[32m+[m[32m        running (app, () -> {[m
[32m+[m[32m            JPA.withTransaction(() -> {[m
[32m+[m[32m                Etiqueta etiqueta = EtiquetaDAO.find(1);[m
[32m+[m[32m                EtiquetaService.deleteEtiqueta(etiqueta.id);[m
[32m+[m[32m                Usuario usuario = UsuarioDAO.find(1);[m
[32m+[m[32m                assertEquals(0,usuario.etiquetas.size());[m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/test/resources/tareas_dataset_1.xml b/test/resources/tareas_dataset_1.xml[m
[1mindex f705fe2..d9f8676 100644[m
[1m--- a/test/resources/tareas_dataset_1.xml[m
[1m+++ b/test/resources/tareas_dataset_1.xml[m
[36m@@ -6,4 +6,6 @@[m
   <Tarea id="2" usuarioId="1" descripcion="Estudiar el parcial de matem√°ticas" estado="pendiente" />[m
   <Tarea id="3" usuarioId="1" descripcion="Leer el libro de ingl√©s" estado="pendiente" />[m
   <Tarea id="4" usuarioId="2" descripcion="Salir a correr" estado="pendiente" />[m
[32m+[m[32m  <Etiqueta id="1" nombre="ENCARNA" usuarioId="1"/>[m
[32m+[m[32m  <tarea_etiqueta/>[m
 </dataset>[m
